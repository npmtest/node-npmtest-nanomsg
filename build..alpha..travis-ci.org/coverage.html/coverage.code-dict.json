{"/home/travis/build/npmtest/node-npmtest-nanomsg/test.js":"/* istanbul instrument in package npmtest_nanomsg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nanomsg/lib.npmtest_nanomsg.js":"/* istanbul instrument in package npmtest_nanomsg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nanomsg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nanomsg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nanomsg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nanomsg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nanomsg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nanomsg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nanomsg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_nanomsg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nanomsg.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_nanomsg.__dirname +\n                    '/lib.npmtest_nanomsg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nanomsg/node_modules/nanomsg/lib/index.js":"var nn            = require('bindings')('node_nanomsg.node');\nvar util          = require('util');\nvar EventEmitter  = require('events').EventEmitter;\nvar Duplex        = require('stream').Duplex;\n\n/**\n * generic socket-level NN_SOL_SOCKET options\n */\nvar sol = {\n  linger          : nn.NN_LINGER,\n  sndbuf          : nn.NN_SNDBUF,\n  rcvbuf          : nn.NN_RCVBUF,\n  sndtimeo        : nn.NN_SNDTIMEO,\n  rcvtimeo        : nn.NN_RCVTIMEO,\n  reconn          : nn.NN_RECONNECT_IVL,\n  maxreconn       : nn.NN_RECONNECT_IVL_MAX,\n  sndprio         : nn.NN_SNDPRIO,\n  rcvprio         : nn.NN_RCVPRIO,\n  rcvmaxsize      : nn.NN_RCVMAXSIZE,\n  tcpnodelay      : nn.NN_TCP_NODELAY,\n  ipv6            : nn.NN_IPV4ONLY,\n}\n\n/**\n * Socket implementation\n */\n\nfunction Socket (type, opts) {\n\n    opts = opts || {};\n    this.af_domain = opts.raw ? nn.AF_SP_RAW : nn.AF_SP;\n    this.type = type;\n\n    switch(type) {\n        case 'req':\n            this.protocol = nn.NN_REQ;\n            this.sender=true;\n            this.receiver=true;\n            break;\n\n        case 'rep':\n            this.protocol = nn.NN_REP;\n            this.sender = true;\n            this.receiver = true;\n            break;\n\n        case 'pair':\n            this.protocol = nn.NN_PAIR;\n            this.sender = true;\n            this.receiver = true;\n            break;\n\n        case 'push':\n            this.protocol = nn.NN_PUSH;\n            this.sender = true;\n            this.receiver = false;\n            // nndontwait otherwise defaults true, PUSH socket default is false\n            opts.dontwait = opts.dontwait || false;\n            break;\n\n        case 'pull':\n            this.protocol = nn.NN_PULL;\n            this.sender = false;\n            this.receiver = true;\n            break;\n\n        case 'pub':\n            this.protocol = nn.NN_PUB;\n            this.sender = true;\n            this.receiver = false;\n            break;\n\n        case 'sub':\n            this.protocol = nn.NN_SUB;\n            this.sender = false;\n            this.receiver = true;\n            break;\n\n        case 'bus':\n            this.protocol = nn.NN_BUS;\n            this.sender = true;\n            this.receiver = true;\n            break;\n\n        case 'surveyor':\n            this.protocol = nn.NN_SURVEYOR;\n            this.sender = true;\n            this.receiver = false;\n            break;\n\n        case 'respondent':\n            this.protocol = nn.NN_RESPONDENT;\n            this.sender = true;\n            this.receiver = true;\n            break;\n\n        default:\n            throw new Error('unrecognised socket type ' + type);\n            break;\n    }\n\n  this.binding = nn.Socket(this.af_domain, this.protocol);\n  this.bound = {};\n  this.connected = {};\n  this.queue = [];\n\n  /* async I/O option */\n  this.dontwait('dontwait' in opts ? opts.dontwait : true);\n\n  /*  subscription filter control */\n  this.channels     = {};\n\n  /*  subscription handling at initialization  */\n  if (opts.hasOwnProperty('chan')) {\n    if (Array.isArray(opts.chan)) {\n      opts.chan.forEach(this._register.bind(this));\n    } else {\n      throw new TypeError('chan requires an Array');\n    }\n  } else if (type === 'sub') {\n    this._register(''); //default topic is an empty string\n  }\n\n  /* sockopt api handling at initialization */\n  for(var sokopt in sol){\n    if(opts.hasOwnProperty(sokopt)) this[sokopt](opts[sokopt]);\n  }\n\n  /* start listening for inbound messages */\n  if (this.af_domain === nn.AF_SP && this.receiver) {\n    this._startPollReceive();\n  }\n\n  if (!opts.hasOwnProperty('objectMode')) {\n    // reduce the highwatermark from 16K msgs to 16msgs\n    // would be more useful if we have a backpressure mechanism\n    opts.objectMode = true;\n  }\n\n  Duplex.call(this, opts);\n\n}\n\nutil.inherits(Socket, Duplex);\n\nSocket.prototype._protect = function (ret, unwind) {\n    if(ret < 0) {\n        if (unwind) unwind.call(this);\n        this.emit('error', new Error(nn.Err()));\n        return null;\n    }\n    return ret;\n};\n\n/* like _protect, but ret is an array where the first element\n * is the error code (0=good, <0=bad), and the second element\n * is the value to return if there was no error.\n */\nSocket.prototype._protectArray = function (ret, unwind) {\n    if(ret[0] < 0) {\n        if (unwind) unwind.call(this);\n        this.emit('error', new Error(nn.Err()));\n        return null;\n    }\n    return ret[1];\n};\n\nSocket.prototype._send = function (msg, flags) {\n    if (this.closed) return;\n\n    if(this.type === 'surveyor' || this.type === 'rep') {\n        this._startPollReceive();\n    }\n\n    if (this.transform && typeof this.transform === 'function') {\n      msg = this.transform(msg);\n    }\n    return this._protect(nn.Send(this.binding, msg, flags), function () {\n        this.queue.unshift([msg, flags]);\n    });\n};\n\nSocket.prototype._receive = function () {\n  if (this.closed){\n    this.push(null);\n    return;\n  }\n\n  var msg = nn.Recv(this.binding, this.nndontwait);\n\n  if(this.type === 'surveyor') {\n        if(msg < 0 && nn.Errno() === nn.EFSM) {\n            this._stopPollSend();\n            this._stopPollReceive();\n            return;\n        }\n    } else if(this.type === 'rep') {\n      this._stopPollReceive();\n    }\n  if (msg === -1) return;\n\n  if (this.restore && typeof this.restore === 'function') msg = this.restore(msg);\n  this.push(msg);\n};\n\nSocket.prototype._startPollSend = function () {\n    if (!this._pollSend) {\n        this._pollSend = nn.PollSocket(this.binding, true, function (events) {\n            if (events) this.flush();\n        }.bind(this));\n    }\n}\n\nSocket.prototype._startPollReceive = function () {\n  if (!this._pollReceive) {\n    this._pollReceive = nn.PollSocket(this.binding, false, function (events) {\n      if (events) this._receive();\n    }.bind(this));\n  }\n}\n\nSocket.prototype._stopPollSend = function () {\n    if (this._pollSend) nn.PollStop(this._pollSend);\n    this._pollSend = null;\n}\n\nSocket.prototype._stopPollReceive = function () {\n    if (this._pollReceive) nn.PollStop(this._pollReceive);\n    this._pollReceive = null;\n}\n\nSocket.prototype._register = function(chan){\n  if (this.channels.hasOwnProperty('')) {\n    this.rmchan('');\n    this._register(chan);\n  } else if (nn.Chan(this.binding, nn.NN_SUB_SUBSCRIBE, chan) !== -1) {\n    this.channels[chan] = true;\n  } else {\n    this.emit('error', new Error( nn.Err() + ' : ' + chan));\n  }\n};\n\nSocket.prototype._write = function(buf, _, cb){\n  this.send(buf, this.nndontwait);\n  cb();\n}\n\nSocket.prototype._read = function (n) {}\n\n/**\n * Socket API\n */\n\nSocket.prototype.bind = function (addr) {\n  return this.bound[addr] = this._protect(nn.Bind( this.binding, addr ));\n}\n\nSocket.prototype.connect = function (addr) {\n  return this.connected[addr] = this._protect(nn.Connect( this.binding, addr ));\n}\n\nSocket.prototype.shutdown = function (addr) {\n  var eid;\n  if (this.bound.hasOwnProperty(addr)) {\n    eid = this.bound[addr];\n    delete this.bound[addr];\n    return this._protect(nn.Shutdown(this.binding, eid));\n  } else if (this.connected.hasOwnProperty(addr)) {\n    eid = this.connected[addr];\n    delete this.connected[addr];\n    return this._protect(nn.Shutdown(this.binding, eid));\n  }\n};\n\nSocket.prototype.flush = function () {\n    while(this.queue.length) {\n        var entry = this.queue.shift();\n        this._send(entry[0], Number(entry[1]) || 0);\n    }\n    this._stopPollSend();\n};\n\nSocket.prototype.close = function () {\n    if(!this.closed) {\n        // Prevent \"Bad file descriptor\" from recursively firing \"error\" event\n        this.closed_status = nn.Close(this.binding);\n        this.closed = true;\n\n        this._stopPollSend();\n        this._stopPollReceive();\n\n        this.emit('close');\n\n        return this.closed_status;\n    }\n\n    // TODO: AJS: in the event of multiple close, we remember\n    // the return code from the first valid close, and return\n    // it for all subsequent close attempts. This appears to be\n    // in the spirit of the original author's intention, but\n    // perhaps it would be better to return EBADF or some other\n    // error?\n    return this.closed_status;\n};\n\nSocket.prototype.send = function (buf, flags) {\n    this.queue.push([buf, flags]);\n    this._startPollSend();\n    return buf.length;\n};\n\n/* returns an int, a string, or throws EBADF, ENOPROTOOPT, ETERM */\nSocket.prototype.getsockopt = function (level, option) {\n    return this._protectArray(nn.Getsockopt(this.binding, level, option));\n};\n\nSocket.prototype.setsockopt = function (level, option, value) {\n    return this._protect(nn.Setsockopt(this.binding, level, option, value));\n};\n\n/**\n * Device implementation\n */\nfunction Device (sock1,sock2) {\n    var that = this;\n    this.sock1= sock1;\n    this.sock2 = sock2;\n    this.s1 = -1;\n    this.s2 = -1;\n\n    if(sock1 instanceof Socket) {\n        this.s1 = sock1.binding;\n\n        if(sock2 instanceof Socket) {\n            this.s2 = sock2.binding;\n        }\n\n        this._timer = setImmediate(function () {\n            nn.DeviceWorker(that.s1, that.s2, function (err) {\n                that.emit('error', new Error('lib err: '+ err +'\\n'+ nn.Err()));\n            });\n        });\n\n    } else {\n        throw new Error('expected at least one Socket argument');\n    }\n\n    EventEmitter.call(this);\n}\n\nutil.inherits(Device, EventEmitter);\n\n/**\n * sockopt API\n */\nSocket.prototype.linger     = opt('linger');\nSocket.prototype.sndbuf     = opt('sndbuf');\nSocket.prototype.rcvbuf     = opt('rcvbuf');\nSocket.prototype.sndtimeo   = opt('sndtimeo');\nSocket.prototype.rcvtimeo   = opt('rcvtimeo');\nSocket.prototype.reconn     = opt('reconn');\nSocket.prototype.maxreconn  = opt('maxreconn');\nSocket.prototype.sndprio    = opt('sndprio');\nSocket.prototype.rcvprio    = opt('rcvprio');\nSocket.prototype.rcvmaxsize = opt('rcvmaxsize');\n\n/* ipv6 & tcpnodelay sockopt methods. these two opts are a little different */\nSocket.prototype.ipv6 = function (bool) {\n  if(arguments.length){\n    if(bool){\n      if(nn.Setopt(this.binding, nn.NN_SOL_SOCKET, sol.ipv6, 0) > -1)\n        return true;\n      throw new Error(nn.Err() + ': '+this.type + ' ipv6@activing\\n');\n    } else {\n      if(nn.Setopt(this.binding, nn.NN_SOL_SOCKET, sol.ipv6, 1) > -1)\n        return false;\n      throw new Error(nn.Err() + ': '+this.type+' ipv6@deactiving\\n');\n    }\n  } else {\n    switch(nn.Getopt(this.binding, nn.NN_SOL_SOCKET, sol.ipv6)){\n      case 1: return false;\n      case 0: return true;\n      default:\n        throw new Error(nn.Err() +': '+this.type+' ipv6@getsockopt\\n');\n    }\n  }\n}\n\nSocket.prototype.tcpnodelay = function (bool) {\n  if(arguments.length){\n    if(bool){\n      if(nn.Setopt(this.binding, nn.NN_TCP, nn.NN_TCP_NODELAY, 1) > -1)\n        return true;\n      throw new Error(nn.Err() + ': '+this.type + ' nodelay@activing\\n');\n    } else {\n      if(nn.Setopt(this.binding, nn.NN_TCP, nn.NN_TCP_NODELAY, 0) > -1)\n        return false;\n      throw new Error(nn.Err() + ': '+this.type+' nodelay@deactiving\\n');\n    }\n  } else {\n    switch(nn.Getopt(this.binding, nn.NN_TCP, nn.NN_TCP_NODELAY)){\n      case 1: return true;\n      case 0: return false;\n      default:\n        throw new Error(nn.Err() +': '+this.type+' nodelay@getsockopt\\n');\n    }\n  }\n}\n\n/* set binary or text websocket options */\nSocket.prototype.wsopt = function (str) {\n  if (arguments.length) {\n    var wsopt = {\n      text   : nn.NN_WS_MSG_TYPE_TEXT,\n      binary : nn.NN_WS_MSG_TYPE_BINARY,\n    }\n    if (nn.Setopt(this.binding, nn.NN_WS, nn.NN_WS_MSG_TYPE, wsopt[str]) > -1)\n      return true;\n    throw new Error(nn.Err() + ': '+this.type + ' wsopt@'+ str + '\\n');\n  } else {\n    switch(nn.Getopt(this.binding, nn.NN_WS, nn.NN_WS_MSG_TYPE)){\n      case 0x01: return 'text';\n      case 0x02: return 'binary';\n      default:\n        throw new Error(nn.Err() +': '+ this.type + ' wsopt@getsockopt\\n');\n    }\n  }\n}\n\n/* sockopt API workhorse */\nfunction opt (option) {\n  return function (value) {\n    if (typeof value === 'undefined') {\n      return nn.Getopt(this.binding, nn.NN_SOL_SOCKET, sol[option]);\n    }\n\n    if(nn.Setopt(this.binding, nn.NN_SOL_SOCKET, sol[option], value) > -1) {\n      return true;\n    }\n\n    throw new Error(nn.Err() + ': ' + this.type + option + '@' + value + '\\n');\n  }\n};\n\n/* chan and rmchan sockopt methods. only relevant for subscription sockets */\nSocket.prototype.chan       = function (list) {\n  if (Array.isArray(list)) {\n    list.forEach(this._register.bind(this));\n  } else {\n    throw new TypeError('chan requires an Array');\n  }\n}\n\nSocket.prototype.rmchan     = function() {\n  var i = arguments.length;\n  while(i--) {\n    if (this.channels[arguments[i]]) {\n      if (nn.Chan(this.binding, nn.NN_SUB_UNSUBSCRIBE, arguments[i]) > -1) {\n        delete this.channels[arguments[i]];\n      } else {\n        this.emit('error', new Error( nn.Err() + ' : ' + chan));\n      }\n    }\n  };\n}\n\nSocket.prototype.dontwait   = function (bool) {\n  if (arguments.length) {\n    if(bool){\n      this.nndontwait = nn.NN_DONTWAIT;\n      return true;\n    } else {\n      this.nndontwait = 0;\n      return false;\n    }\n  } else {\n    return Boolean(this.nndontwait);\n  }\n}\n\n/**\n * module API\n */\nfunction createSocket (type, opts) {\n    return new Socket(type, opts);\n}\n\nfunction symbolInfo (symbol) {\n    return nn.SymbolInfo(symbol);\n}\n\nfunction symbol (symbol) {\n    return nn.Symbol(symbol);\n}\n\nfunction term () {\n    return nn.Term();\n}\n\nfunction createDevice (sock1, sock2) {\n    return new Device(sock1, sock2);\n}\n\nexports._bindings = nn;\nexports.Socket = Socket;\nexports.createSocket = createSocket;\nexports.symbolInfo = symbolInfo;\nexports.symbol = symbol;\nexports.term = term;\nexports.socket = createSocket;\n\nexports.createDevice = createDevice;\nexports.device = createDevice;\n","/home/travis/build/npmtest/node-npmtest-nanomsg/node_modules/nanomsg/perf/common.js":"'use strict';\n\nexports.createMsg = function(msgType, sz) {\n  var buf;\n  switch (msgType) {\n    case '--buffer':\n      buf = new Buffer(sz);\n      buf.fill('o');\n      break;\n    case '--string':\n      buf = new Array(sz + 1).join('o');\n      break;\n    default:\n      console.err('Unspecified msg type not supported, please use --buffer or --string.');\n      process.exit(1);\n  }\n  return buf;\n}\n","/home/travis/build/npmtest/node-npmtest-nanomsg/node_modules/nanomsg/perf/local_lat.js":"'use strict';\n\nvar nano = require('../');\nvar assert = require('assert');\n\nif (process.argv.length != 5) {\n    console.log('usage: node local_lat.js <bind-to> <msg-size> <roundtrips>');\n    process.exit(1);\n}\nvar bind_to = process.argv[2];\nvar sz = Number(process.argv[3]);\nvar rts = Number(process.argv[4]);\n\nvar s = nano.socket('pair');\nassert(s.binding !== -1);\nvar rc = s.tcpnodelay(true);\nassert(rc === true);\nrc = s.bind(bind_to);\nassert(rc >= 0);\n\nvar i = 0;\ns.on('data', function (data) {\n    assert.equal(data.length, sz);\n    var nbytes = s.send(data);\n    assert.equal(nbytes, sz);\n    if (++i === rts) {\n        s.flush();\n        s.close();\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-nanomsg/node_modules/nanomsg/perf/local_thr.js":"'use strict';\n\nvar nano = require('../');\nvar assert = require('assert');\n\nif (process.argv.length != 5) {\n    console.log('usage: node local_thr.js <bind-to> <msg-size> <msg-count>');\n    process.exit(1);\n}\nvar bind_to = process.argv[2];\nvar sz = Number(process.argv[3]);\nvar count = Number(process.argv[4]);\n\nvar s = nano.socket('pair');\nassert(s.binding !== -1);\nvar rc = s.bind(bind_to);\nassert(rc >= 0);\n\nvar sw;\n\nfunction finish() {\n    sw = process.hrtime(sw);\n    var total = sw[0] + (sw[1] / 1e9);\n    var thr = count / total;\n    var mbs = (thr * sz * 8) / 1000000;\n    console.log('message size: %d [B]', sz);\n    console.log('message count: %d', count);\n    console.log('throughput: %d [msg/s]', thr.toFixed(0));\n    console.log('throughput: %d [Mb/s]', mbs.toFixed(3));\n    rc = s.close();\n    assert(rc === 0);\n}\n\nvar i = 0;\ns.on('data', function (data) {\n    assert(data.length === sz);\n    if (!sw) {\n        sw = process.hrtime();\n    }\n    if (++i === count) {\n        finish();\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-nanomsg/node_modules/nanomsg/perf/remote_lat.js":"'use strict';\n\nvar nano = require('../');\nvar assert = require('assert');\nvar createMsg = require('./common').createMsg;\n\nif (process.argv.length < 5 || process.argv.length > 6) {\n    console.log('usage: node remote_lat.js <connect-to> <msg-size> <roundtrips> [--buffer|--string]');\n    process.exit(1);\n}\nvar connect_to = process.argv[2];\nvar sz = Number(process.argv[3]);\nvar rts = Number(process.argv[4]);\n// Specific to node-nanomsg.\nvar msgType = process.argv[5] || '--buffer';\n\nvar s = nano.socket('pair');\nassert(s.binding !== -1);\nvar rc = s.tcpnodelay(true);\nassert(rc === true);\nrc = s.connect(connect_to);\nassert(rc >= 0);\n\nvar buf = createMsg(msgType, sz)\n\nvar sw;\n\nfunction finish() {\n    sw = process.hrtime(sw);\n    var total = sw[0] * 1e6 + sw[1] / 1e3;\n    var lat = total / (rts * 2);\n    console.log('message size: %d [B]', sz);\n    console.log('roundtrip count: %d', rts);\n    console.log('average latency: %d [us]', lat.toFixed(3));\n    s.close()\n}\n\nfunction send() {\n    var nbytes = s.send(buf);\n    assert.equal(nbytes, sz);\n}\n\nvar i = 0;\ns.on('data', function (data) {\n    assert.equal(data.length, sz);\n    if (++i === rts) {\n        finish();\n    } else {\n        send();\n    }\n});\n\nsw = process.hrtime();\nsend();\n","/home/travis/build/npmtest/node-npmtest-nanomsg/node_modules/nanomsg/perf/remote_thr.js":"'use strict';\n\nvar nano = require('../');\nvar assert = require('assert');\nvar createMsg = require('./common').createMsg;\n\nif (process.argv.length < 5 || process.argv.length > 6) {\n    console.log('usage: node remote_thr.js <bind-to> <msg-size> <msg-count> [--string|--buffer]');\n    process.exit(1);\n}\n\nvar connect_to = process.argv[2];\nvar sz = Number(process.argv[3]);\nvar count = Number(process.argv[4]);\n// Specific to node-nanomsg.\nvar msgType = process.argv[5] || '--buffer';\n\nvar s = nano.socket('pair');\nassert(s.binding !== -1);\nvar rc = s.connect(connect_to);\nassert(rc >= 0);\n\nvar buf = createMsg(msgType, sz);\n\nfor (var i = 0; i != count; i++) {\n    var nbytes = s.send(buf);\n    assert(nbytes === sz);\n}\n\ns.flush();\ns.close();\n"}